#!/usr/bin/env bash
set -euo pipefail
shopt -s extglob

## If we're running in debug mode, be REALLY VERBOSE:
if [[ "${BUILDKITE_PLUGIN_JULIA_DEBUG_PLUGIN:-false}" == "true" ]]; then
    set -x
fi

CACHE_DIR=${BUILDKITE_PLUGIN_JULIA_CACHE_DIR:-${HOME}/.cache/julia-buildkite-plugin}

echo "--- :broom: Performing clean-up"


### Step 1: Remove any code coverage files.

echo "Removing coverage files"

# Once JuliaLang/julia#26573 has been fixed, this should no longer be necessary.
find "${CACHE_DIR}"/julia_installs -name "*.jl.*.cov" -type f -delete || true

# Some packages check coverage files in, so only remove writable ones
if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]]; then
    find "${JULIA_DEPOT_PATH}"/packages -name "*.jl.*.cov" -type f -perm -200 -delete || true
fi


### Step 2: Reduce the size of our depot by running `Pkg.gc`.

# since we remove most manifests at the start of each pipeline (cleaning the depot),
# there's no way for Pkg to actually track which artifacts are active, so we just invoke
# `gc()` with `collect_delay` set to zero to cause immediate collection on versions of
# julia that are new enough to have a generational Pkg GC.

# Allow the user to customize whether items are GC'ed immediately or not
# Defaults to deleting things after a week of inactivity
CLEANUP_COLLECT_DELAY="${BUILDKITE_PLUGIN_JULIA_CLEANUP_COLLECT_DELAY:-604800}" # 1 week

GC_CMD="""
using Pkg, Dates

collect_delay = Second(parse(Int64, ARGS[1]))

@info(\"Running Pkg.gc()\", collect_delay)
if VERSION >= v\"1.6-\"
    # If we're on v1.6+, we can use verbose, which is nice
    Pkg.gc(collect_delay=collect_delay, verbose=true)
elseif VERSION >= v\"1.3-\"
    # If we're on v1.3+, we must set the collect_delay low
    Pkg.gc(collect_delay=collect_delay)
else
    # Otherwise, on truly old versions, the only thing we can do is call gc()
    Pkg.gc()
end
"""
julia --color=yes -e "${GC_CMD}" "${CLEANUP_COLLECT_DELAY}" || true


### Step 3: Reduce the size of our depot by removing old precompilation files.

# Julia does not track when a precompilation file was last used, so we simply
# remove files in the `compiled` directory until we are below the hard limit.

COMPILECACHE="${JULIA_DEPOT_PATH}/compiled"

if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]] && [[ -d "${COMPILECACHE}" ]]; then
    CACHE_SIZE_HUMAN=$(du -h -s "${COMPILECACHE}" | cut -f 1)
    # `-k` gives consistently the number of kilobytes on both macOS and Linux,
    # without it BSD `du` would give the number of multiples of 512 bytes.
    CACHE_SIZE=$(($(du -k -s "${COMPILECACHE}" | cut -f 1) * 1024))
    CACHE_LIMIT="${BUILDKITE_PLUGIN_JULIA_COMPILECACHE_SIZE_LIMIT:-1073741824}"
    echo "The compilation cache size is: ${CACHE_SIZE_HUMAN}"

    if [[ ${CACHE_SIZE} -gt ${CACHE_LIMIT} ]]; then
        echo "This is greater than the hard limit (${CACHE_SIZE} > ${CACHE_LIMIT} bytes), so we will clear the compilation cache"

        # Remove oldest files until we are below the hard limit
        # We do this in Julia to avoid platform portability issues.
        julia --color=yes -e '
            function main(compilecache, cache_size_str, cache_limit_str)
                cache_size = parse(Int, cache_size_str)
                cache_limit = parse(Int, cache_limit_str)

                # Get all files with their modification times
                files = []
                for (root, _, files_in_dir) in walkdir(compilecache)
                    for file in files_in_dir
                        path = joinpath(root, file)
                        push!(files, (; path, stat=stat(path)))
                    end
                end

                # Sort by modification time (oldest first)
                sort!(files; by=file->file.stat.mtime)

                # Remove files until we are under the limit
                for file in files
                    rm(file.path)
                    cache_size -= file.stat.size
                    cache_size <= cache_limit && break
                end
            end

            main(ARGS...)
        ' "${COMPILECACHE}" "${CACHE_SIZE}" "${CACHE_LIMIT}" || true

        # Cleanup empty directories
        find "${COMPILECACHE}" -type d -empty -delete
    fi
fi


### Step 4: Remove old depots.

# We mark a depot as in-use by `touch`ing it at the start of the pipeline,
# so we can remove any depots that are older than a certain age.

PIPELINE_AGE_LIMIT="${BUILDKITE_PLUGIN_JULIA_PIPELINE_AGE_LIMIT:-2592000}"

julia --color=yes -e '
    function main(depots_dir, age_limit_str)
        age_limit = parse(Int, age_limit_str)
        current_time = time()

        # Process all depot directories
        for depot in readdir(depots_dir; join=true)
            isdir(depot) || continue
            depot_age = current_time - mtime(depot)
            if depot_age > age_limit
                println("Removing old depot: ", depot)

                # Old versions of Julia cannot reliably chmod or rm directories
                run(ignorestatus(`chmod -R u+w $depot`))
                run(ignorestatus(`rm -rf $depot`))
            end
        end
    end
    main(ARGS...)
' "${CACHE_DIR}"/depots "${PIPELINE_AGE_LIMIT}" || true
