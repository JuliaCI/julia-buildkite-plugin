#!/usr/bin/env bash
set -euo pipefail
shopt -s extglob

## If we're running in debug mode, be REALLY VERBOSE:
if [[ "${BUILDKITE_PLUGIN_JULIA_DEBUG_PLUGIN:-false}" == "true" ]]; then
    set -x
fi

CACHE_DIR=${BUILDKITE_PLUGIN_JULIA_CACHE_DIR:-${HOME}/.cache/julia-buildkite-plugin}

echo "--- :broom: Performing clean-up"


### Step 1: Remove any code coverage files.

echo "Removing coverage files"

# Once JuliaLang/julia#26573 has been fixed, this should no longer be necessary.
if [[ -d "${CACHE_DIR}"/julia_installs ]]; then
    find "${CACHE_DIR}"/julia_installs -name "*.jl.*.cov" -type f -delete
fi

# Some packages check coverage files in, so only remove writable ones
if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" && \
      -d "${JULIA_DEPOT_PATH}"/packages ]]; then
    find "${JULIA_DEPOT_PATH}"/packages -name "*.jl.*.cov" -type f -perm -200 -delete
fi


### Step 2: Reduce the size of our depot by removing old precompilation files.

# Julia does not track when a precompilation file was last used, so we simply
# remove files in the `compiled` directory until we are below the limit.

COMPILED_DIR="${JULIA_DEPOT_PATH}/compiled"

# default limit: 1 GiB
COMPILED_LIMIT="${BUILDKITE_PLUGIN_JULIA_COMPILED_SIZE_LIMIT:-1073741824}"

if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]] && [[ -d "${COMPILED_DIR}" ]]; then
    COMPILED_SIZE_HUMAN=$(du -h -s "${COMPILED_DIR}" | cut -f 1)
    # `-k` gives consistently the number of kilobytes on both macOS and Linux,
    # without it BSD `du` would give the number of multiples of 512 bytes.
    COMPILED_SIZE=$(($(du -k -s "${COMPILED_DIR}" | cut -f 1) * 1024))
    echo "The compilation cache size is: ${COMPILED_SIZE_HUMAN}"

    if [[ ${COMPILED_SIZE} -gt ${COMPILED_LIMIT} ]]; then
        echo "This is greater than the limit (${COMPILED_SIZE} > ${COMPILED_LIMIT} bytes), so we will clear the compilation cache"

        # Remove files until we are below the limit
        # We do this in Julia to avoid platform portability issues.
        julia --color=yes -e '
            function main(compilecache, size_str, limit_str)
                size = parse(Int, size_str)
                limit = parse(Int, limit_str)

                # Get all files with their modification times
                worklist = []
                for (root, dirs, files) in walkdir(compilecache)
                    for file in files
                        path = joinpath(root, file)
                        push!(worklist, (; path, stat=stat(path)))
                    end
                end

                # Sort by modification time (oldest first)
                sort!(worklist; by=entry->entry.stat.mtime)

                # Remove files until we are under the limit
                for entry in worklist
                    rm(entry.path)
                    size -= entry.stat.size
                    size <= limit && break
                end
            end

            main(ARGS...)
        ' "${COMPILED_DIR}" "${COMPILED_SIZE}" "${COMPILED_LIMIT}" || true

        # Cleanup empty directories
        find "${COMPILED_DIR}" -type d -empty -delete
    fi
fi


### Step 3: Reduce the size of our depot by removing old artifacts.

# This is normally done by `Pkg.gc`, however, since manifests are ephemeral
# (and logs directories may not even persist) that doesn't work well.
# So instead we remove directories based on their creation time.

ARTIFACTS_DIR="${JULIA_DEPOT_PATH}/artifacts"

# default limit: 10 GiB
ARTIFACTS_LIMIT="${BUILDKITE_PLUGIN_JULIA_ARTIFACTS_SIZE_LIMIT:-10737418240}"

if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]] && [[ -d "${ARTIFACTS_DIR}" ]]; then
    ARTIFACTS_SIZE_HUMAN=$(du -h -s "${ARTIFACTS_DIR}" | cut -f 1)
    # `-k` gives consistently the number of kilobytes on both macOS and Linux,
    # without it BSD `du` would give the number of multiples of 512 bytes.
    ARTIFACTS_SIZE=$(($(du -k -s "${ARTIFACTS_DIR}" | cut -f 1) * 1024))
    echo "The artifact store size is: ${ARTIFACTS_SIZE_HUMAN}"

    if [[ ${ARTIFACTS_SIZE} -gt ${ARTIFACTS_LIMIT} ]]; then
        echo "This is greater than the limit (${ARTIFACTS_SIZE} > ${ARTIFACTS_LIMIT} bytes), so we will clear the artifact store"

        # Remove directories until we are below the limit
        # We do this in Julia to avoid platform portability issues.
        julia --color=yes -e '
            function main(artifacts, size_str, limit_str)
                size = parse(Int, size_str)
                limit = parse(Int, limit_str)

                # Get all artifacts with their creation times
                worklist = []
                for dir in readdir(artifacts)
                    path = joinpath(artifacts, dir)
                    isdir(path) || continue
                    push!(worklist, (; path, stat=stat(path)))
                end

                # Sort by creation time (oldest first)
                sort!(worklist; by=entry->entry.stat.ctime)

                # Remove artifacts until we are under the limit
                for entry in worklist
                    # artifacts can have funky permissions
                    run(`chmod -R u+w $(entry.path)`)
                    sz = parse(Int, split(read(`du -k -s $(entry.path)`, String))[1]) * 1024
                    rm(entry.path; recursive=true)
                    size -= sz
                    size <= limit && break
                end
            end

            main(ARGS...)
        ' "${ARTIFACTS_DIR}" "${ARTIFACTS_SIZE}" "${ARTIFACTS_LIMIT}" || true
    fi
fi


### Step 4: If the depot is still too big, remove it altogether.

# Data may be stored in unmanaged directories (e.g. `conda` or `scratchspaces`)

# default limit: COMPILED_LIMIT + ARTIFACTS_LIMIT + 10GiB (~20GiB normally)
DEPOT_LIMIT_DEFAULT=$(($COMPILED_LIMIT+$ARTIFACTS_LIMIT+10737418240))
DEPOT_LIMIT="${BUILDKITE_PLUGIN_JULIA_DEPOT_SIZE_LIMIT:-${DEPOT_LIMIT_DEFAULT}}"

if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]]; then
    DEPOT_SIZE_HUMAN=$(du -h -s "${JULIA_DEPOT_PATH}" | cut -f 1)
    # `-k` gives consistently the number of kilobytes on both macOS and Linux,
    # without it BSD `du` would give the number of multiples of 512 bytes.
    DEPOT_SIZE=$(($(du -k -s "${JULIA_DEPOT_PATH}" | cut -f 1) * 1024))
    echo "The depot size is: ${DEPOT_SIZE_HUMAN}"

    if [[ ${DEPOT_SIZE} -gt ${DEPOT_LIMIT} ]]; then
        echo "This is greater than the limit (${DEPOT_SIZE} > ${DEPOT_LIMIT} bytes), so we will clear the entire depot"
        rm -rf "${JULIA_DEPOT_PATH}"
        mkdir -p "${JULIA_DEPOT_PATH}"
    fi
fi


### Step 5: Remove old depots.

# We mark a depot as in-use by `touch`ing it at the start of the pipeline,
# so we can remove any depots that are older than a certain age.

DEPOT_AGE_LIMIT="${BUILDKITE_PLUGIN_JULIA_DEPOT_AGE_LIMIT:-2592000}"

julia --color=yes -e '
    function main(depots_dir, age_limit_str)
        age_limit = parse(Int, age_limit_str)
        current_time = time()

        # Process all depot directories
        for depot in readdir(depots_dir; join=true)
            isdir(depot) || continue
            depot_age = current_time - mtime(depot)
            if depot_age > age_limit
                println("Removing old depot: ", depot)

                # Old versions of Julia cannot reliably chmod or rm directories
                run(ignorestatus(`chmod -R u+w $depot`))
                run(ignorestatus(`rm -rf $depot`))
            end
        end
    end
    main(ARGS...)
' "${CACHE_DIR}"/depots "${DEPOT_AGE_LIMIT}" || true
