#!/bin/bash
set -euo pipefail
shopt -s extglob


## Set some global configuration options, but allow users to override them

## If we're running in debug mode, be REALLY VERBOSE:
if [[ "${BUILDKITE_PLUGIN_JULIA_DEBUG_PLUGIN:-false}" == "true" ]]; then
    set -x
fi

# Where Julia will be downloaded/extracted to, and where we'll store our depots and whatnot
# Persist this directory to massively speed up your builds
CACHE_DIR=${BUILDKITE_PLUGIN_JULIA_CACHE_DIR:-${HOME}/.cache/julia-buildkite-plugin}

# The version of Julia we're downloading
JULIA_VERSION="${BUILDKITE_PLUGIN_JULIA_VERSION}"

# If the user has asked for an isolated depot, we will create one inside of `CACHE_DIR`
# that is specific to the current pipeline; use `PERSIST_DEPOT_DIRS` to keep some directories
# around between invocations; by default we persist content-addressed directories such as
# packages, artifacts and compiled `.ji` files
if [[ "${BUILDKITE_PLUGIN_JULIA_ISOLATED_DEPOT:-true}" == "true" ]]; then
    # Export `JULIA_DEPOT_PATH` so that future julia invocations use this depot
    export JULIA_DEPOT_PATH="${CACHE_DIR}/depots/${BUILDKITE_PIPELINE_ID}"
    PERSIST_DEPOT_DIRS="$(echo ${BUILDKITE_PLUGIN_JULIA_PERSIST_DEPOT_DIRS:-packages,artifacts,compiled,datadeps,logs} | tr ',' ' ' )"

    # Helper function to join a list of arguments by a particular character
    function join_by { local IFS="$1"; shift; echo "$*"; }

    # If the depot we're isolating ourselves inside of actually exists, we clean out
    # any directories not explicitly saved via `PERSIST_DEPOT_DIRS`
    if [[ -d "${JULIA_DEPOT_PATH}" ]]; then
        echo "--- :broom: Cleaning out depot at ${JULIA_DEPOT_PATH}, persisting: '${PERSIST_DEPOT_DIRS}'"
        pushd "${JULIA_DEPOT_PATH}" >/dev/null
        rm -rf -- !($(join_by "|" ${PERSIST_DEPOT_DIRS}))
        popd >/dev/null
    fi
else
    if [[ -v BUILDKITE_PLUGIN_JULIA_PERSIST_DEPOT_DIRS ]]; then
        buildkite-agent annotate --style warning "persist_depot_dirs specified with a non-isolated depot; this has no effect."
    fi
fi

# Look around to find the default download engine
# We prefer `curl` as it's more likely it's up to date and not some kind of
# busybox impostor, which `wget` is within our very own test suite!
if [[ -n "$(which curl 2>/dev/null)" ]]; then
    download() { curl -Lfs "$1" -o "$2" -z "$2"; }
elif [[ -n "$(which wget 2>/dev/null)" ]]; then
    download() { wget -nv -NP "$(dirname "$2")" "$1"; }
else
    buildkite-agent annotate --style error "No download agent available"
    exit 1
fi

if [[ "${OSTYPE}" == "darwin"* ]] || [[ "${OSTYPE}" == "freebsd"* ]]; then
    # BSD-style `stat` uses a different syntax than GNU-style
    stat_mtime() {
        stat -f "%m" "$@"
    }
else
    stat_mtime() {
        stat -c "%Y" "$@"
    }
fi

# Look around to find `python3`; if it doesn't exist, complain
if [[ ! -v BUILDKITE_PLUGIN_JULIA_PYTHON ]]; then
    if [[ -n "$(which python3 2>/dev/null)" ]]; then
        PYTHON="$(which python3)"
    elif [[ -n "$(which python 2>/dev/null)" ]] && [[ "$(python --version)" == "Python 3"* ]]; then
        PYTHON="$(which python)"
    fi
else
    PYTHON="$(which "${BUILDKITE_PLUGIN_JULIA_PYTHON}")"
fi

if [[ ! -x "${PYTHON:-}" ]]; then
    buildkite-agent annotate --style warning "No python 3 available!"
    exit 1
fi

# We allow the user to override the architecture we download
ARCH="${BUILDKITE_PLUGIN_JULIA_ARCH:-$(uname -m)}"

# Next, let's download Julia by calculating the URL we'll download from,
# then using `curl`/`wget`'s timestamping features to re-download if the
# source URL has updated its contents; if we end up downloading something
# we'll notice and re-extract by comparing timestamps of the file before
# and after download.
echo "--- :julia: Downloading Julia ${JULIA_VERSION} for arch ${ARCH}"

# Calculate the download URL
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    os="linux"
    case "$ARCH" in
      "x86_64")
        larch="x64"
        rosarch="linux-x86_64"
        nightly_rosarch="linux64"
        ;;
      "i686")
        larch="x86"
        rosarch="linux-i686"
        nightly_rosarch="linux32"
        ;;
      "aarch64")
        larch="aarch64"
        rosarch="linux-aarch64"
        nightly_rosarch="linuxaarch64"
        ;;
      *)
        buildkite-agent annotate --style error "Unhandled OS $OSTYPE/arch $ARCH combo"
        exit 1
        ;;
    esac
    ext="tar.gz"
elif [[ "$OSTYPE" == "linux-musl"* ]]; then
    os="musl"
    case "$ARCH" in
      "x86_64")
        larch="x64"
        rosarch="musl-x86_64"
        nightly_rosarch="musl64"
        ;;
      *)
        buildkite-agent annotate --style error "Unhandled OS $OSTYPE/arch $ARCH combo"
        exit 1
        ;;
    esac
    ext="tar.gz"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os="mac"
    case "$ARCH" in
      "x86_64")
        larch="x64"
        rosarch="mac64"
        ;;
      "arm64" | "aarch64")
        larch="aarch64"
        rosarch="macaarch64"
        ;;
      *)
        buildkite-agent annotate --style error "Unhandled OS $OSTYPE/arch $ARCH combo"
        exit 1
        ;;
    esac
    ext="tar.gz"
elif [[ "$OSTYPE" == "msys" ]]; then
    os="winnt"
    case "$ARCH" in
      "x86_64")
        larch="x64"
        rosarch="win64"
        nightly_rosarch="win64"
        ;;
      "i686")
        larch="x86"
        rosarch="win32"
        nightly_rosarch="win32"
        ;;
      *)
        buildkite-agent annotate --style error "Unhandled OS $OSTYPE/arch $ARCH combo"
        exit 1
        ;;
    esac
    ext="zip"
else
    buildkite-agent annotate --style error "Unhandled OS $OSTYPE"
    exit 1
fi

path="bin/$os/$larch"
if [[ "$JULIA_VERSION" == "nightly" ]]; then        # `version: 'nightly'`
    bucket="julialangnightlies-s3"
    path="$path/julia-latest-$nightly_rosarch"
elif [[ "$JULIA_VERSION" =~ ^(.+)-nightly$ ]]; then # for example, `version: '1.6-nightly'`
    bucket="julialangnightlies-s3"
    release="${BASH_REMATCH[1]}"
    path="$path/$release/julia-latest-$nightly_rosarch"
else
    bucket="julialang-s3"
    if [[ $JULIA_VERSION =~ ^-?[0-9]+$ ]]; then     # for example, `version: '1'` or `version: '234'`
        release="$("${PYTHON}" $(dirname $BASH_SOURCE)/expand-major-only.py "${JULIA_VERSION}")"
    else
        release="${JULIA_VERSION}"                  # for example, `version: '123.456'`
    fi
    # TODO: support for a fully-specified version, e.g. 1.5.3
    path="$path/$release/julia-$release-latest-$rosarch"
fi
url="https://$bucket.julialang.org/$path.$ext"

# Download Julia to our cache directory.  If the file already exists, this may take
# only a few hundred milliseconds, as it checks the timestamp of the file on the
# remote server and compares against the local timestamp.
echo "Source URL: $url"
archive_path="${CACHE_DIR}/downloads/$path.$ext"
mkdir -p "$(dirname ${archive_path})"
orig_mtime=$(stat_mtime "${archive_path}" 2>/dev/null || true)
download "${url}" "${archive_path}"
post_dl_mtime=$(stat_mtime "${archive_path}")

# If the download actually touched the file, we're going to unpack it
# We unpack into another location within our cache directory, then add
# it to the path.
unpack_dest=${CACHE_DIR}/julia_installs/$path
echo "Installing location: ${unpack_dest}"
if [[ ! -d "${unpack_dest}" || "${orig_mtime}" != "${post_dl_mtime}" ]]; then
    echo "New or updated installation detected, unpacking!"
    rm -rf "${unpack_dest}"
    mkdir -p "${unpack_dest}"
    if [[ "${archive_path}" == *.tar.gz ]]; then
      tar -xof "${archive_path}" --strip-components=1 -C "${unpack_dest}"
    elif [[ "${archive_path}" == *.zip ]]; then
      unzip -q "${archive_path}" -d "${unpack_dest}"
      mv "${unpack_dest}"/julia-*/* "${unpack_dest}"
      rmdir "${unpack_dest}"/julia-*
    else
      buildkite-agent annotate --style error "Unhandled archive type ${archive_path}"
      exit 1
    fi
fi

# Show that julia is installed and print out the version info
echo "--- :julia: Installation Successful"
echo "Julia ${JULIA_VERSION} successfully installed to ${unpack_dest}"
"${unpack_dest}/bin/julia" -e 'using InteractiveUtils; versioninfo()'

# Update the registry
if [[ "${BUILDKITE_PLUGIN_JULIA_UPDATE_REGISTRY:-true}" == "true" ]]; then
    echo "--- :julia: Updating the registry"

    "${unpack_dest}/bin/julia" -e '
      using Pkg
      if VERSION >= v"1.1-"
        if !isdir(joinpath(DEPOT_PATH[1], "registries", "General"))
          Pkg.Registry.add("General")
        else
          Pkg.Registry.update()
        end
      else
        Pkg.API.update_registry(Pkg.Types.Context())
      end'
fi

if [[ "${OSTYPE}" != "msys" ]]; then
    # Export `PATH` such that this `julia` is the first one other plugins find
    export PATH=${unpack_dest}/bin:"$PATH"
else
    # buildkite/agent#872: PATH gets corrupted on Windows
    # So we pass each element of `$PATH` through `cygpath -w`
    MSYS_PATH="$(cygpath -w ${unpack_dest}/bin)"
    IFS=':'
    for p in $PATH ; do
        MSYS_PATH="${MSYS_PATH};$(cygpath -w $p)"
    done
    export PATH="${MSYS_PATH}"
fi
